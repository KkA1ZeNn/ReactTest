Шаг 1: Создайте контекст (новый файл)
Создайте: src/contexts/PostsContext.tsx
Что должно быть в файле:
Интерфейс контекста - описать, что будет доступно (posts, deletePost, addPost и т.д.)
createContext с дефолтным значением
Provider компонент, который будет оборачивать App
Экспорт контекста для использования в hook
Шаг 2: Создайте custom hook (тот же файл или отдельный)
Создайте: usePosts() hook
Что должен делать:
Использовать useContext для получения данных из PostsContext
Проверять, что hook используется внутри Provider (выбрасывать ошибку если нет)
Возвращать удобный API: { posts, deletePost, addPost }
Шаг 3: Перенесите логику из App в Provider
В Provider компоненте:
Перенести useState с постами из App.tsx
Перенести функцию deletePost
Перенести логику добавления постов из CreatePostListForm
Передать все это через value пропс контекста
Шаг 4: Оберните приложение в Provider
В App.tsx:
Импортировать PostsProvider
Обернуть весь JSX в <PostsProvider>
Убрать useState и deletePost из App
Упростить пропсы компонентов
Шаг 5: Используйте hook в компонентах
В Post.tsx:
Импортировать usePosts
Вызвать const { deletePost } = usePosts()
Использовать deletePost(post.id) в кнопке
В PostList.tsx:
Заменить пропс posts на const { posts } = usePosts()
Убрать передачу пропсов
В CreatePostListForm.tsx:
Заменить пропсы на const { posts, addPost } = usePosts()
Шаг 6: Обновите типы и интерфейсы
Удалить пропсы из интерфейсов компонентов
Добавить типизацию для контекста
Обновить импорты
Преимущества после рефакторинга:
✅ Post напрямую получает deletePost без промежуточных компонентов
✅ PostList больше не передает лишние пропсы
✅ Легко добавлять новые функции - только в контексте
✅ Переиспользуемость - любой компонент может использовать usePosts()
✅ Типобезопасность - TypeScript проверит правильность использования
Порядок работы:
Создайте контекст и hook (не забудьте типизацию!)
Перенесите логику из App в Provider
Оберните App в Provider
Постепенно заменяйте пропсы на hook в каждом компоненте
Тестируйте после каждого шага
Совет: Делайте по одному компоненту за раз, чтобы легче было отлаживать